{"version":3,"sources":["CounterComp.js","App.js","reportWebVitals.js","index.js"],"names":["CountComp","name","deleteitem","useState","count","setCount","className","onClick","alert","App","number","setNumber","refinput","useRef","handle","x","current","value","length","prevNumber","CounterComp","Math","random","class","ref","type","onKeyPress","e","code","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPA+BeA,MA5Bf,YAA0C,IAArBC,EAAoB,EAApBA,KAEnB,GAFuC,EAAdC,WAECC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OACE,sBAAKC,UAAU,OAAf,UACE,gCAAQL,IACR,4BAAIG,IACJ,wBAAQG,QAAS,kBAAMF,EAASD,EAAQ,IAAIE,UAAU,YAAtD,eAGA,wBACEC,QAAS,WACHH,GAAS,EACXI,MAAM,kBAGRH,EAASD,EAAQ,IAEnBE,UAAU,YARZ,eAYA,wBAAQC,QAAS,kBAAMF,EAAS,IAAIC,UAAU,WAA9C,uB,MCvBS,SAASG,IACtB,MAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KACMC,EAAWC,mBAEjB,SAASC,IACP,IAAMC,EAAIH,EAASI,QAAQC,MACjB,KAANF,IACAL,EAAOQ,QAAU,GACnBV,MAAM,4BAGRG,GAAU,SAACQ,GAAD,4BACLA,GADK,CAER,cAACC,EAAD,CAAiCnB,KAAMc,EAAGb,WAAYA,GAApCmB,KAAKC,eAEzBV,EAASI,QAAQC,MAAQ,KAO3B,SAASf,EAAWD,IAEpB,OACE,sBAAKK,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,6BACA,sBAAKiB,MAAM,SAAX,UACE,uBACEC,IAAKZ,EACLa,KAAK,OACLC,WAbR,SAAqBC,GACJ,UAAXA,EAAEC,MAAkBd,KAalBe,YAAY,gBAEd,yBAAQtB,QAASO,EAAQR,UAAU,MAAnC,UACG,IADH,oBAEoB,OAEpB,wBAAQC,QAAS,kBAAMI,EAAU,KAAKL,UAAU,MAAhD,0BAIF,qBAAKA,UAAU,YAAf,SAA4BI,OC7ClC,IAYeoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChC,EAAD,MAEFiC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5b970f3c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles/counterCard.css\";\r\n\r\nfunction CountComp({ name, deleteitem }) {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <label>{name}</label>\r\n      <p>{count}</p>\r\n      <button onClick={() => setCount(count + 1)} className=\"changeBtn\">\r\n        +\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          if (count <= 0) {\r\n            alert(\"cant Decrement\");\r\n            return;\r\n          }\r\n          setCount(count - 1);\r\n        }}\r\n        className=\"changeBtn\"\r\n      >\r\n        -\r\n      </button>\r\n      <button onClick={() => setCount(0)} className=\"resetBtn\">Reset</button>\r\n      {/* <button onClick={() => deleteitem(name)}>Delete</button> */}\r\n    </div>\r\n  );\r\n}\r\nexport default CountComp;\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport CounterComp from \"./CounterComp\";\nimport \"./styles/container.css\";\nexport default function App() {\n  const [number, setNumber] = useState([]);\n  const refinput = useRef();\n\n  function handle() {\n    const x = refinput.current.value;\n    if (x === \"\") return;\n    if (number.length >= 15) {\n      alert(\"Cannot add more than 15\");\n      return;\n    }\n    setNumber((prevNumber) => [\n      ...prevNumber,\n      <CounterComp key={Math.random()} name={x} deleteitem={deleteitem} />,\n    ]);\n    refinput.current.value = \"\";\n  }\n\n  function handlepress(e) {\n    if (e.code === \"Enter\") handle();\n  }\n\n  function deleteitem(name) {}\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"Title\"> Keep a Counter</div>\n      <div class=\"worker\">\n        <input\n          ref={refinput}\n          type=\"text\"\n          onKeyPress={handlepress}\n          placeholder=\"Enter Label\"\n        />\n        <button onClick={handle} className=\"btn\">\n          {\" \"}\n          Add / Press Enter{\" \"}\n        </button>\n        <button onClick={() => setNumber([])} className=\"btn\">\n          Clear All\n        </button>\n      </div>\n      <div className=\"container\">{number}</div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}